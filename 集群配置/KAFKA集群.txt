
kafka集群，zookeeper集群，先搭建zookeeper集群，再搭建kafka集群

zookeeper + kafka的集群，都是三节点

1、zookeeper集群搭建

将zookeeper-3.4.5.tar.gz拷贝到/usr/local目录下。
对zookeeper-3.4.5.tar.gz进行解压缩：tar -zxvf zookeeper-3.4.5.tar.gz。
对zookeeper目录进行重命名：mv zookeeper-3.4.5 zk

配置zookeeper相关的环境变量
vi /etc/profile
JAVA_HOME=/usr/local/jdk1.7.0_79
ZOOKEEPER_HOME=/usr/local/zk
PATH=$PATH:$JAVA_HOME/bin:$ZOOKEEPER_HOME/bin
export JAVA_HOME ZOOKEEPER_HOME PATH
使环境变量即时生效，不然只能在下次重进此用户时生效：
source /etc/profile

配置集群参数
cd zk/conf
cp zoo_sample.cfg zoo.cfg

vi zoo.cfg
修改：dataDir=/usr/local/zk/data
新增：
server.0=IP1:2888:3888	
server.1=IP2:2888:3888
server.2=IP3:2888:3888

cd zk
mkdir data
cd data

vi myid
0

在另外两个节点上按照上述步骤配置ZooKeeper，使用scp将zk和/etc/profile拷贝到其他两台机器上即可。唯一的区别是标识号分别设置为1和2。
（zoo.cfg里面的server.0这个0对应的就是myid中的0）
scp /etc/profile root@IP2:/etc/
scp /etc/profile root@IP3:/etc/
scp -r zk root@IP2:/usr/local/
scp -r zk root@IP3:/usr/local/
(-r  递归复制整个目录。 )
注：如果在host里有配置过映射，IP1也可以改成映射名
scp完成后
在另外两台机器上检查环境变量
cat /etc/profile
如果没问题，需要 source /etc/profile
在另外两台机器上vi /usr/local/zk/data/myid
分别改成1和2


分别在三台机器上执行：zkServer.sh start
检查ZooKeeper状态：zkServer.sh status，应该是一个leader，两个follower
执行jps：检查三个节点是否都有QuromPeerMain进程

2、kafka集群搭建
将scala-2.11.4.tgz拷贝到/usr/local目录下。
对scala-2.11.4.tgz进行解压缩：tar -zxvf scala-2.11.4.tgz。
对scala目录进行重命名：mv scala-2.11.4 scala

配置scala相关的环境变量
vi /etc/profile
JAVA_HOME=/usr/local/jdk1.7.0_79
ZOOKEEPER_HOME=/usr/local/zk
SCALA_HOME=/usr/local/scala
PATH=$PATH:$JAVA_HOME/bin:$ZOOKEEPER_HOME/bin:$SCALA_HOME/bin
export JAVA_HOME ZOOKEEPER_HOME SCALA_HOME PATH

 

查看scala是否安装成功：scala -version

按照上述步骤在其他机器上都安装好scala。使用scp将scala和/etc/profile拷贝到另外两台机器上即可。
scp /etc/profile root@IP2:/etc/
scp /etc/profile root@IP3:/etc/
scp -r scala root@IP2:/usr/local/
scp -r scala root@IP3:/usr/local/

将kafka_2.9.2-0.8.1.tgz拷贝到/usr/local目录下。
对kafka_2.9.2-0.8.1.tgz进行解压缩：tar -zxvf kafka_2.9.2-0.8.1.tgz。
对kafka目录进行改名：mv kafka_2.9.2-0.8.1 kafka

配置kafka
vi /usr/local/kafka/config/server.properties
broker.id：依次增长的整数，0、1、2，集群中Broker的唯一id
zookeeper.connect=192.168.0.108:2181,192.168.0.109:2181,192.168.0.111:2181

安装slf4j
将slf4j-1.7.6.zip解压，找到slf4j-nop-1.7.6.jar复制到kafka的libs目录下面
（解决以下问题：kafka启动报如下错误，或者 启动消费者和生产者报如下错误 

SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".）


vi /usr/local/kafka/bin/kafka-run-class.sh 

if [ -z "$KAFKA_JVM_PERFORMANCE_OPTS" ]; then
  KAFKA_JVM_PERFORMANCE_OPTS="-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true"
fi

去掉-XX:+UseCompressedOops即可
（解决低版本kafka Unrecognized VM option 'UseCompressedOops'问题）
按照上述步骤在另外两台机器分别安装kafka。用scp把kafka拷贝到其他机器即可。
scp -r kafka root@IP2:/usr/local/
scp -r kafka root@IP3:/usr/local/

唯一区别的，就是server.properties中的broker.id，要设置为1和2
vi /usr/local/kafka/config/server.properties

在三台机器上的kafka目录下，分别执行以下命令：
cd /usr/local/kafka
nohup bin/kafka-server-start.sh config/server.properties &
看一下日志
cat nohup.out
使用jps检查启动是否成功

使用基本命令检查kafka是否搭建成功

bin/kafka-topics.sh --zookeeper 192.168.0.108:2181,192.168.0.109:2181,192.168.0.111:2181 --topic cache-message --replication-factor 1 --partitions 1 --create

bin/kafka-console-producer.sh --broker-list 192.168.0.108:9092,192.168.0.109:9092,192.168.0.111:9092 --topic cache-message

bin/kafka-console-consumer.sh --zookeeper 192.168.0.108:2181,192.168.0.109:2181,192.168.0.111:2181 --topic cache-message --from-beginning


bin/kafka-console-consumer.sh --zookeeper 192.168.0.108:2181,192.168.0.109:2181,192.168.0.111:2181 --topic access-log --from-beginning


{"serviceId":"productInfoService","productId":6}
{"serviceId":"shopInfoService","shopId":1}


启动zookeeper
zkServer.sh start
启动kafka
cd /usr/local/kafka
nohup bin/kafka-server-start.sh config/server.properties &